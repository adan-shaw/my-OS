#
# 如何从'芯片+linux 内核'开始, 剪裁出一个可供编程的SDK新平台??
#
要回答这个问题, 你首先要知道什么是SDK.
	SDK = 芯片 + 编译器(gcc+glibc) + linux 内核.
	而且, 他们的制造过程, 都有先后顺序:
		*1.你必须先设计好'芯片指令集方案'.



		*2.芯片设计出来之后, 开始对照glibc库, 实现c语言最基础的支持.
			 (这里面必然就是根据芯片架构,编写汇编语言,组装成c语言标准库API,
				虽然语法翻译你不需要怎么做,可以直接利用gcc里面原来的翻译,
				但是翻译之后的实体对象,汇编指令集合=C语言API,必须根据芯片架构重写)

				假设是实现对c11的全功能支持, 则要实现c11 + GNU C拓展特性.
				(ps: linux 内核虽然是纯C项目,但是会经常使用GNU C拓展特性, 
						 因此你想编译linux内核, 必须支持GNU C)



		*3.当'芯片 + 编译器(gcc+glibc)'造好之后, 你就可以做linux系统剪裁了.

			 然而linux 内核project 中的大部分默认驱动, 是根据现有的cpu架构编写的.
			 如果你的是新芯片, 你就得重新审核一下这些驱动代码.

			 虽然linux 内核子模块, 不能使用浮点数, 也就是驱动程序也不能用浮点数.
			 虽然linux 内核子模块, 一般是用c语言编写的, 不会植入asm汇编代码.
			 但是, 万一这些linux 内核默认驱动有asm 汇编代码呢?

			 就算没有asm 汇编码, 也可能有性能地狱陷阱.
			 比如说有些代码在intel 上执行1K次, intel 会自动压缩, 偷步, 效率很高.
			 但是在arm上面, arm cpu真的傻傻的执行了1k次,
			 这种性能地域是最麻烦的.
			 因此, 驱动代码必须代码审计一次, 就算是arm 有公版的驱动代码, 你也得稍微看一遍.

			 剪裁完了内核驱动子模块,
			 还要剪裁posix&sysv IPC API库, iptables, selinux
			 ext1,2,3,4 文件系统的逻辑实现, tcp/ip 协议栈API, 等等
			 虽然这些API 子模块, 基本上是用c 语言编写的.
			 但是你需要性能测试, 代码审计, 出现性能缺陷, bug, 
			 你需要进行二次代码审计, 确保移植剪裁做到快, 准, 高质量.

			 最终, 你在这一步, 根据剪裁后的linux内核源码, 
			 编译出可支撑c/c++ API编码的linux 新内核.



		*4.当'芯片 + 编译器(gcc+glibc) + linux 内核'都弄好了, 
			 你就得到了一个可以做c/c++ 编码的平台了,
			 为了提高系统的安全性,
			 为了提高业务编码的便捷性, 所见即所得,
			 你需要向这个已经做好的c/c++ SDK 平台, 移植进去一款脚本机.

			 首先你要审阅java 内核API 的c 实现代码, 看看有没有严重的性能缺陷.
			 其实你可以通过简单的与intel 进行对比, 
			 写一个全面的测试程序, 进行性能对比, 顺便跑跑看看有没有bug.

			 如果java 内核没问题了, 还有java 标准库.
			 庞大的java 标准库, 包括:
					字符串库, http解析库, json+xml解析库
					openssl 校验,加密库
					sql链接引擎, redis, memcache 链接引擎
					...
					等等
			 这些库, 考验的是芯片+gcc编译器+glibc 对'共享链接库'的解析能力,
			 更多的是, 这些标准库里面, 可能有性能缺陷, bug, 
			 因此, 你都需要先测试, 跟intel 对比测试, 有问题再重点进行修复.
			 所以, 当规模大的情况下, 测试能力是很重要的.
			 这么大的工作量, 基本都是:
					移植好之后, 首先测试, 然后发现问题, 再重点扒开, 修复.

			 然后, java 虚拟机, 还要对设备API进行衔接, 如:
					屏幕输出GUI 系统API,
					摄像头录入API,
					声音io API,
					无线电模块io API,
					触屏io API
					...
					等等
			 只有把设备驱动API, 传统计算机系统API, java 内核API,
			 三大类型的API 全部接入java 机, 
			 java 机才能完全成为新系统的编码语言, 取代c/c++



		*5.当虚拟机移植完毕, 马上写几个系统工具, 如:
					ls, mkdir, chmod, cp, rm, 等等
					基础的shell解析运行器, 等等
			 这些系统工具只要满足虚拟机软件java 的安装, 布置, 卸载即可.

			 编写shell install 脚本, 
			 调用这些系统工具, 
			 完成java 软件的安装, 布置, 卸载.

			 然后利用selinux, 增强文件系统的访问控制:
				* 把整个linux 内核, 包括所有API共享链接库, 驱动API共享链接库, 等等;
					全部锁起来, 不允许修改, 访问需要授权.
				* java 虚拟机核心库, 标准库, java驱动衔接库, 等等;
					全部锁起来, 不允许修改, 访问需要授权.
				* 把所有c/c++ 写的系统工具, 构建的java 虚拟机软件安装, 布置, 卸载的shell系统,
					全部用selinux 锁起来, 不让修改or 删除, 
					读取, 执行权限都要过问一下, 做个java软件安装询问.
				* java 软件做成安装区和临时数据区, 安装区同样用selinux锁起来, 
					只有临时数据区, 可以写tmp数据.

			 这样一来, 终端的系统安全会稍微提高一点.



	以上*1-5 点都做到了, 你就实现了:
		从'芯片+linux 内核'开始, 
		剪裁出一个可供编程的SDK新平台了, 而且是以java 为标准语言的新SDK.

	想简单一点, 就不要植入java 机, 直接在第*3 步开始偷工减料.
	直接支持, 审计少量自己需要的驱动, 还有posix c/c++ 编码标准,
	最后以c/c++ 进行编码.
	或者移植lua 这种简单的脚本, 做业务逻辑(只用来处理字符串, 数字等逻辑)
	ps:
		如果用lua 来衔接socket, redis 等, 其实都是大工程;
		你需要审计lua-socket, lua-redis 的实现, c/c++ and lua 源码的实现,
		然后才能真正移植.
		所以最简单就是用lua 来计算字符串, 数字等逻辑, 
		得出结果后, 由c/c++ 发出去, 
		也由c/c++ 接收.

	lua cocos2d 库, 是如何衔接android GUI 系统, 声音系统, socket 系统, 并内建json 的?
	其实json, 可以直接lua json, 完全没压力.
	lua socket for arm, 网络上面版本也很多, 但是也要交叉编译, 让lua-socket 彻底融入arm
	剩下的:
		lua cocos2d 库如何衔接android GUI 系统, 声音系统, 触屏系统的?
		全是根据android java API 来衔接, 最具备跨平台性.
		至于性能损耗问题, 一个客户端, 单机跑, 性能损耗本来就很小.
		只要造一个lua, java 转换器即可.
		甚至lua socket API 也可以直接利用java 转换器, 进行转换.
		json 就不需要了, 这都转换, 浪费转换效率.

	甚至, 整个lua cocos2d 库, 可能都是lua2java 转换库.
	请看: Luaj学习笔记(二) - 在Lua中操作Java对象.html
	已经有实现了.
	所以, lua cocos2d 库, 毫无疑问是lua2java, java2lua 的互相交换, 实现的2d 动画库.





#
# old 历史思考:
#
Android的基础工具, 是为了布置java软件用的, 并不为其它用途. 
Android摘除了apt包安装系统, 嵌入Java机.
仅仅保留基础的共享链接库.
